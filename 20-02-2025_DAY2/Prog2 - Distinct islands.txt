Ibrahim is an interior designer wants to color wall of size M*N. 
He plans to color the wall and put lights of two different colors

The designer can lit the wall using M*N lights.The lights are Blue or pink
in color.Blue colored lights represented with digit-1 and pink colored lights 
represented with digit-0.

The Blue colored lights forms different shapes, that are connected 4 directonally.
The directons are upwards, downwards, left, and right. Ibrahim got an idea to 
count the unique shapes formed by blue colored lights.

You will be given the decorated wall as a matrix wall[][].
Your task is to help Ibrahim to count the unique shapes by the lights.

Input Format:
-------------
Line-1: Two space separated integers M and N, size of the wall.
Next M lines: N space separated integers, either 0 or 1.

Output Format:
--------------
Print an integer, Number of distinct shapes formed by Blue Lights.


Sample Input-1:
---------------
4 5
1 1 0 1 1
1 1 0 0 1
0 0 0 0 0
1 1 0 0 0

Sample Output-1:
----------------
3


Sample Input-2:
---------------
5 5
1 1 0 1 1
1 0 0 0 1
0 0 0 0 0
1 0 0 0 1
1 1 0 1 1

Sample Output-2:
----------------
4

Note: 
-------
The shapes, 
1 1  		  1 1
1      and      1


Solution
#include<bits/stdc++.h>
using namespace std;
int m,n;
vector<vector<int>> dir{{1,0},{-1,0},{0,1},{0,-1}};
void DFS(vector<vector<int>>& grid,int a,int b,int i,int j,vector<vector<bool>>& visited,vector<pair<int,int>>& v){
    auto isSafe=[&](int u,int v){
      return u>=0 && u<m && v>=0 && v<n;  
    };
    
    visited[i][j]=true;
    v.push_back({i-a,j-b});
    
    for(auto d:dir){
        int x=i+d[0];
        int y=j+d[1];
        
        if(isSafe(x,y) && grid[x][y]==1 && !visited[x][y]){
            DFS(grid,a,b,x,y,visited,v);
        } 
    }
}
int main(){
    cin>>m>>n;
    
    vector<vector<int>> grid(m,vector<int>(n));
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            cin>>grid[i][j];
        }
    }
    
    vector<vector<bool>> visited(m,vector<bool>(n,false));
    set<vector<pair<int,int>>> s;
    vector<pair<int,int>> v;
    
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(grid[i][j]==1 && !visited[i][j]){
                DFS(grid,i,j,i,j,visited,v);
                s.insert(v);
                v.clear();
                
            }
        }
    }
    
    cout<<s.size();
    return 0;
}