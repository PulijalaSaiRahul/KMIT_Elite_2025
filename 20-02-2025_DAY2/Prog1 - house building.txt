'''
Arjun wants to build some homes in a land of size R*C.
He wanted to construct homes in rectangular shape.
The place which is remained will be used for gradening.
Accordingly he has prepared the plan and given as
an 2d array plan[][], where 1 indicates home, and 0 indicates garden area.

A home is set of cells with value 1 in rectangular shape.
He wants to findout all the homes in the plan and store their co-ordinates in 
the following order, coords[i] = [x1,y1,x2,y2], where (x1,y1) is the starting
co-ordinate (top left corner), and (x2,y2) is the ending co-ordinate 
(bottom right corner) of i-th home.

Your task is to help Arjun to find all the homes and return the coords[][] of 
all the homes from top left corner to bottom right corner.

NOTE: No two homes are adjacent to each other in 4 directions,
(left, right, top, bottom).

Input Format:
-------------
Line-1: Two integers R and C, size of the land.
Next R lines: C space separated integers, either 0 or 1
0- represents garden area land and 1- represents the home.

Output Format:
--------------
Print 2d array, the co-ordinates of all homes.


Sample Input-1:
---------------
2 3
1 0 0
0 1 1
 
Sample Output-1:
----------------
[0, 0, 0, 0][1, 1, 1, 2]


Sample Input-2:
---------------
4 4
1 1 0 1
0 0 0 0
1 1 0 1
1 1 0 1
 
Sample Output-2:
----------------
[0, 0, 0, 1][0, 3, 0, 3][2, 0, 3, 1][2, 3, 3, 3]

'''

dir=[[0,1],[0,-1],[1,0],[-1,0]]
def isSafe(x,y,grid):
    return x>=0 and y>=0 and x<len(grid) and y<len(grid[0])
    
def DFS(grid,i,j,visited):
    visited[i][j]=True;
    
    for d in dir:
        x=i+d[0]
        y=j+d[1]
        
        
        if(isSafe(x,y,grid) and grid[x][y]==1 and visited[x][y]==False):
            global nx,ny
            if(nx<x or ny<y):
                nx,ny=x,y
            
        
            DFS(grid,x,y,visited);

m,n=map(int,input().split())
grid=[]

for i in range(m):
    g=list(map(int,input().split()))
    grid.append(g)
    
visited=[]
for i in range(m):
    v=[False]*n
    visited.append(v)

ans=[]

for i in range(m):
    for j in range(n):
        if(grid[i][j]==1 and visited[i][j]==False):
            tmp=[]
            nx=i
            ny=j
            
            DFS(grid,i,j,visited)
            
            tmp=[i,j,nx,ny]
            ans.append(tmp)
for i in ans:
    print(i,end="")
            
            
